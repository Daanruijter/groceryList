[{"/home/daan/Desktop/Projecten/groceryList/client/src/index.js":"1","/home/daan/Desktop/Projecten/groceryList/client/src/App.js":"2","/home/daan/Desktop/Projecten/groceryList/client/src/reportWebVitals.js":"3","/home/daan/Desktop/Projecten/groceryList/client/src/GroceryStore.js":"4","/home/daan/Desktop/Projecten/groceryList/client/src/Menu.js":"5","/home/daan/Desktop/Projecten/groceryList/client/src/Delete.js":"6","/home/daan/Desktop/Projecten/groceryList/client/src/Check.js":"7","/home/daan/Desktop/Projecten/groceryList/client/src/Register.js":"8","/home/daan/Desktop/Projecten/groceryList/client/src/Login.js":"9","/home/daan/Desktop/Projecten/groceryList/client/src/Update.js":"10"},{"size":500,"mtime":1610456672118,"results":"11","hashOfConfig":"12"},{"size":236,"mtime":1610458443465,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1610456672118,"results":"14","hashOfConfig":"12"},{"size":16674,"mtime":1610628648645,"results":"15","hashOfConfig":"12"},{"size":1707,"mtime":1610621010794,"results":"16","hashOfConfig":"12"},{"size":1718,"mtime":1610534702394,"results":"17","hashOfConfig":"12"},{"size":3217,"mtime":1610620930522,"results":"18","hashOfConfig":"12"},{"size":2101,"mtime":1610620968718,"results":"19","hashOfConfig":"12"},{"size":1552,"mtime":1610620957909,"results":"20","hashOfConfig":"12"},{"size":379,"mtime":1610457858135,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"k0myve",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/daan/Desktop/Projecten/groceryList/client/src/index.js",[],["45","46"],"/home/daan/Desktop/Projecten/groceryList/client/src/App.js",[],"/home/daan/Desktop/Projecten/groceryList/client/src/reportWebVitals.js",[],"/home/daan/Desktop/Projecten/groceryList/client/src/GroceryStore.js",["47","48","49"],"import React from \"react\";\nimport Delete from \"./Delete\";\nimport Check from \"./Check\";\nimport Update from \"./Update\";\n\nimport \"./GroceryStore.css\";\nimport axios from \"axios\";\n\n\nexport default class GroceryStore extends React.Component {\n \n  constructor(props) {\n    super(props);\n    this.inputProductRef = React.createRef();\n  }\n\n  state = {\n    product: \"\",\n    amount: \"\",\n    information: \"\",\n    groceryData: [],\n    productUpdated: \"\",\n    amountUpdated: \"\",\n    informationUpdated: \"\",\n    groceryDataUpdated: [],\n    updateOpen: false,\n    updateId: \"\",\n    updateArray: [],\n    previousState: { updateArray: { id:\"\", path:\"\" } },\n    updateIdForUpdateFieldToShow: \"\",\n  };\n\n  //clear updatearray when the grocerycomponent mounts\n  componentDidMount() {\n\n    //clear updateIdArray\n    this.clearUpdateIdArray()\n\n      //fetch the items\n    this.fetchData();\n  }\n\n\nclearUpdateIdArray(){\n\n    //clear updateArray\n    console.log(\"componentdidmount\");\n    let url = \"\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      url = \"http://localhost:5000/groceryitems/deleteallidsfromupdateidarray\";\n    }\n    if (process.env.NODE_ENV === \"production\") {\n      url =\n        \"https://blablablaapp.herokuapp.com/groceryitems/deleteallidsfromupdateidarray\";\n    }\n\n    const body = {};\n\n    axios\n      .post(url, body)\n      .then((result) => {})\n\n      .catch((err) => {\n        console.log(err.response);\n      });\n}\n\nclearCheckIdArray(){\n\n   //clear checkIdArray\n   console.log(\"componentdidmount\");\n   let url = \"\";\n\n   if (process.env.NODE_ENV === \"development\") {\n     url = \"http://localhost:5000/groceryitems/deleteallidsfromcheckidarray\";\n   }\n   if (process.env.NODE_ENV === \"production\") {\n     url =\n       \"https://blablablaapp.herokuapp.com/groceryitems/deleteallidsfromcheckidarray\";\n   }\n\n   const body = {};\n\n   axios\n     .post(url, body)\n     .then((result) => {})\n\n     .catch((err) => {\n       console.log(err.response);\n     });\n\n}\n\n  //removes the Update Component Id out of the MongoDB Component Id Array if it's already in it\n  removeUpdateComponentIdFromArray(itemId) {\n    let url = \"\";\n    let id = itemId;\n    if (process.env.NODE_ENV === \"development\") {\n      url = \"http://localhost:5000/groceryitems/deleteidfromupdateidarray\";\n    }\n    if (process.env.NODE_ENV === \"production\") {\n      url =\n        \"https://blablablaapp.herokuapp.com/groceryitems/deleteidfromupdateidarray\";\n    }\n\n    const body = {\n      id,\n    };\n\n    axios\n      .post(url, body)\n      .then((result) => {\n        this.getUpdateComponentIdArrayOnly(id);\n        this.fetchData();\n      })\n\n      .catch((err) => {\n        console.log(err.response);\n      });\n  }\n\n  //set state with current/updated id array after a removing of sending an id\n  getUpdateComponentIdArrayOnly(itemId) {\n    let url = \"\";\n    let id = itemId;\n\n    if (process.env.NODE_ENV === \"development\") {\n      url = \"http://localhost:5000/groceryitems/getupdatearray2\";\n    }\n    if (process.env.NODE_ENV === \"production\") {\n      url =\n        \"https://blablablaapp.herokuapp.com/groceryitems/getupdatearray2\";\n    }\n\n    const body = {};\n\n    axios\n      .get(url, body)\n      .then((res) => {\n        let result = res;\n\n        this.setState({ updateArray: result.data[0].updateIdsArray }, () => {});\n      })\n\n      .catch((err) => {\n        console.log(err.response);\n      });\n  }\n\n  //fetches the Update Component Id Array out of MongoDB\n  getUpdateComponentIdArray(itemId, cback) {\n    let url = \"\";\n    let id = itemId;\n\n    if (process.env.NODE_ENV === \"development\") {\n      url = \"http://localhost:5000/groceryitems/getupdatearray\";\n    }\n    if (process.env.NODE_ENV === \"production\") {\n      url =\n        \"https://blablablaapp.herokuapp.com/groceryitems/getupdatearray\";\n    }\n\n    const body = {id};\n\n    axios\n      .get(url, body)\n      .then((res) => {\n        let result = res;\n        this.setState(\n          { updateArray: result.data[0].updateIdsArray },\n          () => {\n            this.setState((prevState) => ({\n              previousState: prevState,\n            }));\n            cback();\n          }\n        );\n      })\n\n      .catch((err) => {\n        console.log(err.response);\n      });\n  }\n\n  //sends the Id of the clicked Update Component update button to MongoDB\n  sendUpdateComponentId(itemId) {\n    let id = itemId;\n    let url = \"\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      url = \"http://localhost:5000/groceryitems/sendupdateid\";\n    }\n    if (process.env.NODE_ENV === \"production\") {\n      url =\n        \"https://blablablaapp.herokuapp.com/groceryitems/sendupdateid\";\n    }\n\n    //send id of update component to array in Mongo//\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify({\n      id,\n    });\n\n    axios\n      .post(url, body, config)\n      .then((result) => {\n        this.getUpdateComponentIdArrayOnly(id);\n      })\n\n      .catch((err) => {\n        console.log(err.response);\n      });\n  }\n\n  //Updates the item through the update button where the user clicks on\n  updateItem = (itemId, e) => {\n    let id = itemId;\n    this.setState({ updateId: id });\n\n    this.getUpdateComponentIdArray(id, () => {\n      if (this.state.updateArray.includes(id)) {\n        console.log(\"includes id, so remove it\");\n        this.removeUpdateComponentIdFromArray(id);\n        this.catchUpdatedInput(e);\n      }\n      if (!this.state.updateArray.includes(id)) {\n        this.sendUpdateComponentId(id);\n        console.log(\"excludes id, so add it\");\n      }\n    });\n  };\n\n  clearState = () => {\n    this.setState({\n      product: \"\",\n      amount: \"\",\n      information: \"\",\n    });\n  };\n\n  clearStateUpdated = () => {\n    this.setState({\n      productUpdated: \"\",\n      amountUpdated: \"\",\n      informationUpdated: \"\",\n    });\n  };\n\n  triggerFetchData = () => {\n    this.fetchData();\n  };\n\n  fetchData() {\n    let url = \"\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      url = \"http://localhost:5000/groceryitems\";\n    }\n    if (process.env.NODE_ENV === \"production\") {\n      url = \"https://blablablaapp.herokuapp.com/groceryitems\";\n    }\n\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        const groceryData = data;\n        this.setState({ groceryData: groceryData });\n      })\n      .catch((error) => {\n        const errorMessage = error.message;\n        console.log(errorMessage);\n      });\n  }\n\n  deleteAll = () => {\n    if (window.confirm(\"Are you sure you wish to delete all items?\")) {\n      let url = \"\";\n\n      if (process.env.NODE_ENV === \"development\") {\n        url = \"http://localhost:5000/groceryitems/deleteall\";\n      }\n      if (process.env.NODE_ENV === \"production\") {\n        url =\n          \"https://blablablaapp.herokuapp.com/groceryitems/deleteall\";\n      }\n\n      const body = {};\n\n      axios\n        .get(url, body)\n        .then((res) => {\n          this.fetchData();\n          this.clearCheckIdArray();\n          this.clearUpdateIdArray();\n        })\n\n        .catch((err) => {\n          console.log(err.response);\n        });\n    }\n  };\n\n  catchEnterEvent = (e) => {\n    if (e.key === \"Enter\") {\n      this.catchInput(e);\n      if (null !== this.inputProductRef.current) {\n        this.inputProductRef.current.focus();\n      }\n    }\n  };\n\n  catchInput = (e) => {\n    if (this.state.product === \"\" || this.state.amount === \"\") {\n      alert(\"please fill in product and amount fields!\");\n    } else {\n      let groceryData = this.state;\n      let product = groceryData.product;\n      let amount = groceryData.amount;\n      let information = groceryData.information;\n\n      e.preventDefault();\n\n      let url = \"\";\n\n      if (process.env.NODE_ENV === \"development\") {\n        url = \"http://localhost:5000/groceryitems\";\n      }\n      if (process.env.NODE_ENV === \"production\") {\n        url = \"https://blablablaapp.herokuapp.com/groceryitems\";\n      }\n\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      const body = JSON.stringify({\n        product,\n        amount,\n        information,\n      });\n\n      axios\n        .post(url, body, config)\n        .then((res) => {\n          this.fetchData();\n          this.clearState();\n        })\n\n        .catch((err) => {\n          console.log(err.response);\n        });\n    }\n    if (null !== this.inputProductRef.current) {\n      this.inputProductRef.current.focus();\n    }\n  };\n\n  catchUpdatedInput = (e) => {\n\n\n    \n\n    let groceryDataArray;\n    groceryDataArray = this.state.groceryData;\n    console.log(groceryDataArray[0]._id);\n    let id = this.state.updateId;\n\n    let currentItemData;\n\n    currentItemData = groceryDataArray.filter((item) => {\n      if (item._id === id) {\n        return item;\n      }\n    });\n\n    let groceryData = this.state;\n    let productUpdated = groceryData.productUpdated;\n    let amountUpdated = groceryData.amountUpdated;\n    let informationUpdated = groceryData.informationUpdated;\n\n    let currentProduct = currentItemData[0].product;\n    let currentAmount = currentItemData[0].amount;\n    let currentInformation = currentItemData[0].information;\n\n\n  \n\n    e.preventDefault();\n\n    let url = \"\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      url = \"http://localhost:5000/groceryitems/groceryitemsupdated\";\n    }\n    if (process.env.NODE_ENV === \"production\") {\n      url =\n        \"https://blablablaapp.herokuapp.com/groceryitems/groceryitemsupdated\";\n    }\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify({\n      id,\n      productUpdated,\n      amountUpdated,\n      informationUpdated,\n      currentProduct,\n      currentAmount,\n      currentInformation,\n    });\n\n    axios\n      .post(url, body, config)\n      .then((res) => {\n        this.fetchData();\n        this.clearStateUpdated();\n      })\n\n      .catch((err) => {\n        console.log(err.response);\n      });\n    // }\n    if (null !== this.inputProductRef.current) {\n      this.inputProductRef.current.focus();\n    }\n  \n  };\n\n  addInput = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  addUpdatedInput = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  compareUpdateIdArrays() {\n    let currentUpdateIdsArray = this.state.updateArray;\n    let previousUpdateIdsArray = this.state.previousState.updateArray;\n    let length;\n    let currentUpdateIdsArrayLength = currentUpdateIdsArray.length;\n    let previousUpdateIdsArrayLength = previousUpdateIdsArray.length;\n    if (\n      currentUpdateIdsArrayLength !== undefined &&\n      previousUpdateIdsArrayLength !== undefined\n    ) {\n      if (currentUpdateIdsArrayLength > previousUpdateIdsArrayLength) {\n        let updateIdForUpdateFieldToShow =\n          currentUpdateIdsArray[currentUpdateIdsArrayLength - 1];\n\n        return updateIdForUpdateFieldToShow;\n      }\n      if (previousUpdateIdsArrayLength > currentUpdateIdsArrayLength) {\n        length = previousUpdateIdsArrayLength;\n      }\n\n      if (length !== undefined) {\n      }\n    }\n  }\n\n  render() {\n    let updateIdForUpdateFieldToShow;\n    let currentUpdateIdsArray = this.state.updateArray;\n    let previousUpdateIdsArray = this.state.previousState.updateArray;\n    let length;\n    let currentUpdateIdsArrayLength = currentUpdateIdsArray.length;\n    let previousUpdateIdsArrayLength = previousUpdateIdsArray.length;\n\n    \n    if (\n      currentUpdateIdsArrayLength !== undefined &&\n      previousUpdateIdsArrayLength !== undefined\n    ) {\n      if (currentUpdateIdsArrayLength > previousUpdateIdsArrayLength) {\n        updateIdForUpdateFieldToShow =\n          currentUpdateIdsArray[currentUpdateIdsArrayLength - 1];\n      }\n    }\n\n    let whichUpdateFieldToOpen;\n    console.log(this.state.updateId);\n    let id;\n    id = this.state.updateId;\n\n    if (\n      this.state.updateArray.length !== undefined &&\n      this.state.previousState.updateArray.length !== undefined &&\n      this.state.updateArray.includes(id)\n    ) {\n      whichUpdateFieldToOpen = updateIdForUpdateFieldToShow;\n \n    }\n\n\n    let groceryData = this.state.groceryData;\n\n    let itemToDisplay = groceryData.map((item) => {\n      return (\n        <div className=\"grocerystore-positioner\" key={item._id}>\n    \n          {whichUpdateFieldToOpen === item._id ? (\n            <div className=\"grocerystore-horizontal-line-updateopen\">\n              <hr />\n            </div>\n          ) : (\n            <div className=\"grocerystore-horizontal-line-updateclosed\">\n              <hr />\n            </div>\n          )}\n          <div className=\"grocerystore-product-data\">{item.product}</div>{\" \"}\n        \n          {whichUpdateFieldToOpen === item._id ? (\n            <div className=\"grocerystore-product-update\">\n              <input\n                name=\"productUpdated\"\n                onChange={(e) => this.addUpdatedInput(e)}\n                type=\"text\"\n                placeholder=\"type the product here\"\n                required\n                value={this.state.productUpdated}\n                ref={this.inputProductRef}\n              ></input>\n            </div>\n          ) : null}\n          <div className=\"grocerystore-amount-data\">{item.amount}</div>\n          {whichUpdateFieldToOpen === item._id ? (\n            <div className=\"grocerystore-amount-update\">\n              <input\n                name=\"amountUpdated\"\n                onChange={(e) => this.addUpdatedInput(e)}\n                type=\"text\"\n                placeholder=\"type the amount here\"\n                required\n                value={this.state.amountUpdated}\n              ></input>\n            </div>\n          ) : null}\n          <div className=\"grocerystore-information-data\">\n            {item.information}\n          </div>{\" \"}\n\n          {whichUpdateFieldToOpen === item._id ? (\n            <div className=\"grocerystore-information-update\">\n              <input\n                name=\"informationUpdated\"\n                onChange={(e) => this.addUpdatedInput(e)}\n                type=\"text\"\n                placeholder=\"type the information here\"\n                required\n                value={this.state.informationUpdated}\n              ></input>\n            </div>\n          ) : null}\n          <div className=\"grocerystore-delete\">\n            <Delete id={item._id} triggerFetchdata={this.triggerFetchData} />\n          </div>\n          <div className=\"grocerystore-check\">\n            <Check id={item._id} />\n          </div>\n          <div className=\"grocerystore-update\">\n            <Update updateItem={this.updateItem} id={item._id} />\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"grocerystore-wrapper\">\n        <div className=\"grocerystore-grid\">\n          <div onClick={this.catchInput} className=\"grocerystore-add-item\">\n            Add Item\n          </div>\n          <div className=\"grocerystore-product  grocerystore-header\">\n            Product\n          </div>\n          <div className=\"grocerystore-product-input\">\n            <input\n              name=\"product\"\n              onChange={(e) => this.addInput(e)}\n              type=\"text\"\n              placeholder=\"type the product here\"\n              required\n              value={this.state.product}\n              ref={this.inputProductRef}\n            />\n          </div>\n          <div className=\"grocerystore-amount  grocerystore-header\">Amount</div>\n          <div className=\"grocerystore-amount-input\">\n            <input\n              name=\"amount\"\n              onChange={(e) => this.addInput(e)}\n              type=\"text\"\n              placeholder=\"type the amount here\"\n              required\n              value={this.state.amount}\n            />\n          </div>\n          <div className=\"grocerystore-extra-info  grocerystore-header\">\n            Extra info\n          </div>\n          <div className=\"grocerystore-extra-info-input\">\n            <input\n              name=\"information\"\n              onChange={(e) => this.addInput(e)}\n              onKeyDown={this.catchEnterEvent}\n              type=\"text\"\n              placeholder=\"type extra info here\"\n              required\n              value={this.state.information}\n            />\n          </div>\n          <div className=\"grocerystore-positioner \">{itemToDisplay}</div>\n\n          <div onClick={this.deleteAll} className=\"grocerystore-delete-all\">\n            Delete all\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/home/daan/Desktop/Projecten/groceryList/client/src/Menu.js",["50"],"import React, { Component } from \"react\";\n// import Register from \"./Register\";\nimport \"./Menu.css\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\n\n\nexport default class Menu extends React.Component\n  {\n  state = {\n    loginDivOpen: false,\n    registerDivOpen: false,\n  };\n\n  toggleLoginDiv = () => {\n  \n    // this.props.test(test1);\n    this.setState({ loginDivOpen: !this.state.loginDivOpen }, () => {\n      if (this.state.loginDivOpen) {\n        this.setState({ registerDivOpen: !this.state.loginDivOpen });\n      }\n    });\n  };\n  toggleRegisterDiv = () => {\n    this.setState({ registerDivOpen: !this.state.registerDivOpen }, () => {\n      if (this.state.loginDivOpen) {\n        this.setState({ loginDivOpen: !this.state.loginDivOpen });\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"menu-wrapper\">\n        <div onClick={this.toggleLoginDiv} className=\"menu-login\">\n          Login{\" \"}\n        </div>\n        <div onClick={this.toggleRegisterDiv} className=\"menu-register\">\n          Register\n        </div>\n        {this.state.loginDivOpen ? (\n          <div>\n            <Login />\n          </div>\n        ) : null}\n        {this.state.registerDivOpen ? (\n          <div>\n            <Register />\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\n\n//   mapStateToProps = (state: any) => {\n//     return {\n//       state: state,\n//     };\n//   };\n//   //fires actions to Redux (in this case the fetchfunction)//\n//   mapDispatchToProps = (dispatch: any) => {\n//     return { test: () => dispatch(test()) };\n//   };\n// }\n// export default connect<StateFromProps, DispatchFromProps, void>(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(Menu);\n","/home/daan/Desktop/Projecten/groceryList/client/src/Delete.js",[],"/home/daan/Desktop/Projecten/groceryList/client/src/Check.js",[],"/home/daan/Desktop/Projecten/groceryList/client/src/Register.js",[],"/home/daan/Desktop/Projecten/groceryList/client/src/Login.js",[],"/home/daan/Desktop/Projecten/groceryList/client/src/Update.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":126,"column":9,"nodeType":"57","messageId":"58","endLine":126,"endColumn":11},{"ruleId":"59","severity":1,"message":"60","line":385,"column":54,"nodeType":"61","messageId":"62","endLine":385,"endColumn":56},{"ruleId":"55","severity":1,"message":"63","line":489,"column":9,"nodeType":"57","messageId":"58","endLine":489,"endColumn":15},{"ruleId":"55","severity":1,"message":"64","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":26},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'length' is defined but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]